flow1:
%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fff5f5', 'edgeLabelBackground':'#ffffff'}}}%%
flowchart TD
    %% Class Definitions
    classDef iterator fill:#ffebee,stroke:#333
    classDef child fill:#e8f5e9,stroke:#333
    classDef main fill:#e3f2fd,stroke:#333
 
    %% Inheritance Structure
    subgraph Inheritance["Inheritance Hierarchy"]
        iteratorClass["iteratorClass\n\n+function()\n+subFunction()\n+constructor()\n+multiloop()\n+WidthCalc()\n+PtensorCalc()"]:::iterator
       
        randomClass["randomClass\n\n+subFunction(): random"]:::child
        identitiesClass["identitiesClass\n\n+function(): identity"]:::child
        ptensorApplicationClass["ptensorApplicationClass\n\n+subFunction(): a*b"]:::child
        ptensorSumClass["ptensorSumClass\n\n+subFunction(): a+b"]:::child
        targetFuncClass["targetFuncClass\n\n+subFunction(): a+1"]:::child
        activationFuncClass["activationFuncClass\n\n+subFunction(): sigmoid"]:::child
        activationFuncDerivativeClass["activationFuncDerivativeClass\n\n+function(): sigmoid'"]:::child
        costFuncClass["costFuncClass\n\n+subFunction(): (a-b)^2"]:::child
        costFuncDerivativeClass["costFuncDerivativeClass\n\n+function(): 2(a-b)"]:::child
 
        iteratorClass -->|inherits| randomClass
        iteratorClass -->|inherits| identitiesClass
        iteratorClass -->|inherits| ptensorApplicationClass
        iteratorClass -->|inherits| ptensorSumClass
        iteratorClass -->|inherits| targetFuncClass
        iteratorClass -->|inherits| activationFuncClass
        activationFuncClass -->|inherits| activationFuncDerivativeClass
        iteratorClass -->|inherits| costFuncClass
        costFuncClass -->|inherits| costFuncDerivativeClass
    end
 
    %% Main Program Flow
    subgraph Execution["Main Program Execution"]
        Main["Main Program\n\n- layerCount=2\n- trainingCycles=20\n- width=3\n- learningRate=0.1"]:::main
        Instances["Instances\n\n- identities\n- mainIterator\n- randomiser\n- applier\n- adder\n- targetFunc\n- activationFunc\n- deltaActivationFunc\n- costFunc\n- deltaCostFunc"]:::main
 
        Main -->|creates| Instances
        Instances -->|uses| iteratorClass
        Instances -->|uses| randomClass
        Instances -->|uses| identitiesClass
        Instances -->|uses| ptensorApplicationClass
        Instances -->|uses| ptensorSumClass
        Instances -->|uses| targetFuncClass
        Instances -->|uses| activationFuncClass
        Instances -->|uses| activationFuncDerivativeClass
        Instances -->|uses| costFuncClass
        Instances -->|uses| costFuncDerivativeClass
 
        %% Training Process
        subgraph TrainingLoop["Training Process"]
            direction LR
            ForwardPass["Forward Pass\n1. Generate input\n2. Layer propagation\n3. Apply activation"]
            Backprop["Backpropagation\n1. Cost gradient\n2. Weight updates\n3. Apply LR"]
            ForwardPass --> Backprop
        end
 
        Main -->|executes| TrainingLoop
        TrainingLoop -->|uses| Instances
    end
 
    %% Notes
    note1["PtensorCalc:\nMulti-dimensional tensor operations"]
    note1 -.- iteratorClass
 
    note2["Activation:\nSigmoid: 1/(1 + e⁻ᵃ)"]
    note2 -.- activationFuncClass
 
    note3["Cost Function:\nSquared Error: (a-b)²"]
    note3 -.- costFuncClass
 
 
flow 2:
 
%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fff5f5', 'edgeLabelBackground':'#ffffff'}}}%%
flowchart TD
    %% Class Styling
    classDef iterator fill:#ffebee,stroke:#333
    classDef ca fill:#e8f5e9,stroke:#333
    classDef main fill:#e3f2fd,stroke:#333
 
    %% Core Classes
    subgraph "Cellular Automaton Engine"
        iteratorClass["iteratorClass\n\n+PtensorCalc()\n+multiloop()\n+WidthCalc()"]:::iterator
       
        kernelClass["kernelClass\n\n- 3x3 neighborhood rules\n- Center weight=10\n- Edge weight=1"]:::ca
        fullGridClass["fullGridClass\n\n- Initial 3x3 pattern\n- (5,5) to (7,7) alive"]:::ca
        ptensorAppClass["ptensorApplicationClass\n\n- Element-wise mult\n- Debug prints"]:::ca
        growthFuncClass["growthFuncClass\n\n- Activation at 3,12,13\n- Modified Conway rules"]:::ca
       
        iteratorClass -->|inherits| kernelClass
        iteratorClass -->|inherits| fullGridClass
        iteratorClass -->|inherits| ptensorAppClass
        iteratorClass -->|inherits| growthFuncClass
    end
 
    %% Main Program Flow
    subgraph "Simulation Execution"
        Main[["Main Program\n\n- width=10\n- cycles=20"]]:::main
        Init[["Initialize\n- 10x10 grid\n- 10x10x10x10 kernel"]]
        Process[["Process Loop\n1. Apply kernel\n2. Growth function\n3. Display grid"]]
       
        Main --> Init
        Init --> Process
        Process -->|"cycles=20"| End[[End]]
    end
 
    %% Relationships
    Init -->|uses| fullGridClass
    Init -->|uses| kernelClass
    Process -->|uses| ptensorAppClass
    Process -->|uses| growthFuncClass
 
    %% Notes
    note1["Kernel Rules:\nCenter=10, Neighbors=1\n3x3 convolution"]
    note1 -.- kernelClass
 
    note2["Growth Conditions:\nActivate on 3,12,13\n(Modified Conway)"]
    note2 -.- growthFuncClass
 
    note3["Visualization:\nPrints grid each cycle\n1s delay between steps"]
    note3 -.- Process